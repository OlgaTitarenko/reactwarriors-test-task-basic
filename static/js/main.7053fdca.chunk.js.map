{"version":3,"sources":["components/Item.js","components/App.js","index.js"],"names":["Item","data","className","thumbnail","src","alt","title","num_comments","href","permalink","target","rel","App","state","items","isLoading","autoRefresh","minComm","getItems","setState","fetch","then","res","json","children","handleRefresh","clearInterval","autoRefreshInt","setInterval","updateMinComm","event","value","this","itemsSortByComm","filter","item","sort","a","b","maxItem","length","type","onClick","onChange","min","max","map","key","id","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4PAeeA,MAbf,YAAuB,IAARC,EAAO,EAAPA,KAEX,OAAQ,yBAAKC,UAAU,QACA,SAAlBD,EAAKE,UACF,yBAAKC,IAAKH,EAAKE,UAAWE,IAAI,KAC5B,KACN,2BAAIJ,EAAKK,OACT,iDAAuBL,EAAKM,cAC5B,uBAAGC,KAAM,yBAAyBP,EAAKQ,UACpCC,OAAO,SACPC,IAAI,uBAFP,UC2EOC,G,iNA/EbC,MAAQ,CACNC,MAAO,GACPC,WAAW,EACXC,aAAa,EACbC,QAAS,G,EAOXC,SAAW,WACP,EAAKC,SAAS,CAACJ,WAAU,IACzBK,MAAM,mDACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,YAAa,IAAXpB,EAAU,EAAVA,KACJ,EAAKkB,SAAS,CAACL,MAAOb,EAAKuB,SACvBT,WAAW,Q,EAI3BU,cAAgB,WACR,EAAKZ,MAAMG,aACX,EAAKG,SAAS,CAACH,aAAa,IAC5BU,cAAc,EAAKC,kBAEnB,EAAKR,SAAS,CAACH,aAAa,IAC5B,EAAKW,eAAiBC,YAAY,EAAKV,SAAS,O,EAIxDW,cAAgB,SAACC,GACf,EAAKX,SAAS,CACVF,SAAUa,EAAMpB,OAAOqB,S,mFAzB3BC,KAAKd,a,+BA6BG,IAAD,EAC0Cc,KAAKnB,MAA/CC,EADA,EACAA,MAAOC,EADP,EACOA,UAAWC,EADlB,EACkBA,YAAaC,EAD/B,EAC+BA,QAChCgB,EAAkBnB,EACnBoB,QAAO,SAAAC,GAAI,OAAIA,EAAKlC,KAAKM,cAAgBU,KACzCmB,MAAK,SAACC,EAAEC,GAAH,OAAOA,EAAErC,KAAKM,aAAa8B,EAAEpC,KAAKM,gBAExCgC,EAAU,EAKZ,OAH6B,IAA3BN,EAAgBO,SACjBD,EAAUN,EAAgB,GAAGhC,KAAKM,cAE5B,6BACP,6CACA,4BACIkC,KAAK,SACLC,QAASV,KAAKP,cACdvB,UAAU,cAHd,IAIGc,EAAc,OAAS,QAJ1B,iBAMC,6CAAmBC,GACpB,2BAAOwB,KAAK,QACLV,MAAOd,EACP0B,SAAUX,KAAKH,cACfe,IAAK,EACLC,IAAKN,IAETxB,EAAY,yCAEX,yBAAKb,UAAU,YACV+B,EAAgBO,OAAS,EACtBP,EAAgBa,KAAI,gBAAE7C,EAAF,EAAEA,KAAF,OAChB,kBAAC,EAAD,CAAMA,KAAMA,EAAM8C,IAAK9C,EAAK+C,QAE9B,4E,GAvEFC,IAAMC,YCDxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7053fdca.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Item({data}) {\r\n\r\n    return (<div className=\"item\">\r\n        {data.thumbnail !==\"self\" ?\r\n            <img src={data.thumbnail} alt=\"\"/>\r\n            : null }\r\n        <p>{data.title}</p>\r\n        <p>Number of comments {data.num_comments}</p>\r\n        <a href={'https://www.reddit.com'+data.permalink}\r\n           target=\"_blank\"\r\n           rel=\"noopener noreferrer\">Link</a>\r\n    </div>)\r\n}\r\nexport default Item;","import React from \"react\";\r\n\r\nimport Item from './Item';\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    items: [],\r\n    isLoading: false,\r\n    autoRefresh: false,\r\n    minComm: 0\r\n  } ;\r\n\r\n  componentDidMount() {\r\n    this.getItems();\r\n  }\r\n\r\n  getItems = () => {\r\n      this.setState({isLoading:true});\r\n      fetch('https://www.reddit.com/r/reactjs.json?limit=100')\r\n          .then(res => res.json())\r\n          .then(({data}) => {\r\n              this.setState({items: data.children,\r\n                  isLoading: false})\r\n          })\r\n  }\r\n\r\n  handleRefresh = () => {\r\n      if (this.state.autoRefresh) {\r\n          this.setState({autoRefresh: false});\r\n          clearInterval(this.autoRefreshInt);\r\n      } else {\r\n          this.setState({autoRefresh: true});\r\n          this.autoRefreshInt = setInterval(this.getItems,4000);\r\n      }\r\n  }\r\n\r\n  updateMinComm = (event) => {\r\n    this.setState({\r\n        minComm: +event.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {items, isLoading, autoRefresh, minComm} = this.state;\r\n    const itemsSortByComm = items\r\n        .filter(item => item.data.num_comments >= minComm)\r\n        .sort((a,b)=>b.data.num_comments-a.data.num_comments)\r\n\r\n    let maxItem = 0;\r\n\r\n    if (itemsSortByComm.length !== 0) {\r\n       maxItem = itemsSortByComm[0].data.num_comments;\r\n    }\r\n      return <div>\r\n      <h1>Top commented</h1>\r\n      <button\r\n          type=\"button\"\r\n          onClick={this.handleRefresh}\r\n          className=\"btnRefresh\"\r\n      > {autoRefresh ? \"Stop\" : \"Start\"} auto-refresh\r\n      </button>\r\n       <p>Current filter {minComm}</p>\r\n      <input type=\"range\"\r\n             value={minComm}\r\n             onChange={this.updateMinComm}\r\n             min={0}\r\n             max={maxItem}\r\n             />\r\n        {isLoading ? <p>Is loading</p>\r\n        :\r\n          <div className=\"itemList\">\r\n              {itemsSortByComm.length > 0 ?\r\n                  itemsSortByComm.map(({data}) =>\r\n                      <Item data={data} key={data.id}/>\r\n                  )\r\n                  : <p>No results found matching your criteria</p>\r\n              }\r\n          </div>\r\n      }\r\n    </div>;\r\n  }\r\n}\r\n\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App  from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n\r\n"],"sourceRoot":""}